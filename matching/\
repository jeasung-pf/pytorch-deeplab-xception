/***********************************************************************
 * Software License Agreement (BSD License)
 *
 * Copyright 2020 JeaSung (jeasung@peoplefund.co.kr). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *************************************************************************/

#ifndef OPENCV_MATCHER_BASE_HPP_
#define OPENCV_MATCHER_BASE_HPP_

#include <opencv2/core/core.hpp>
#include <opencv2/ml/ml.hpp>
#include <opencv2/features2d/features2d.hpp>

#include <iostream>
#include <string>
#include <vector>

namespace cv { namespace Matcher {

	class CV_EXPORTS_W Base : public CvStatModel
	{
		public:
			CV_WRAP Base(const cv::Ptr<cv::Matcher::FeatureParams> &_featureParams,
					const cv::Ptr<cv::flann::IndexParams> &_indexParams = new cv::flann::KDTreeIndexParams(),
					const cv::Ptr<cv::flann::SearchParams> &_searchParams = new cv::flann::SearchParams(),
					float _filterThreshold);
			virtual ~Base();

			CV_WRAP virtual void clear();

			CV_WRAP virtual bool train(const cv::Mat &trainData, const cv::Mat &trainMask);
			CV_WRAP virtual bool train(const std::vector<cv::Mat> &trainData, const std::vector<cv::Mat> &trainMask);
			CV_WRAP virtual bool predict(const cv::Mat &sample, const cv::Mat &sampleMask, identification_t &response) const;

			virtual void write(CvFileStorage *storage, const char *name) const;
			virtual void read(CvFileStorage *storage, CvFileNode *node);
			
			static bool criterion(cv::DMatch element)
			{
				if (element.distance < filterThreshold) {
					return true;
				}
				return false;
			}

		protected:

			virtual float _match(const cv::Mat sampleDescriptor, const cv::Mat eachDescriptor, std::vector<cv::DMatch> &matches);

			float filterThreshold;

			cv::Ptr<cv::Matcher::FeatureParams> featureParams;
			cv::Ptr<cv::flann::IndexParams> indexParams;
			cv::Ptr<cv::searchParams> searchParams;

			cv::Ptr<cv::Feature2D> featureExtractor;
			std::vector<cv::Ptr<cv::KeyPoint>> templateKeyPoint;
			std::vector<cv::Ptr<cv::Mat>> templateDescriptor;

			cv::Ptr<cv::FlannBasedMatcher> matcher;
	};

}}

#endif
