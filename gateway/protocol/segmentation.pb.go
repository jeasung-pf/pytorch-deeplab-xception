// Code generated by protoc-gen-go. DO NOT EDIT.
// source: segmentation.proto

package protocol

import (
	context "context"
	fmt "fmt"
	protocol "gateway/protocol"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("segmentation.proto", fileDescriptor_c79c702a2977a1e7) }

var fileDescriptor_c79c702a2977a1e7 = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x4e, 0x4d, 0xcf,
	0x4d, 0xcd, 0x2b, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x00, 0x53, 0xc9, 0xf9, 0x39, 0x52, 0x72, 0xe9, 0x89, 0x25, 0xa9, 0xe5, 0x89, 0x95, 0xfa, 0x30,
	0x11, 0x7d, 0xa8, 0x00, 0x44, 0xa5, 0x51, 0x2d, 0x17, 0x4f, 0x30, 0x92, 0x7e, 0x21, 0x13, 0x2e,
	0xee, 0xa2, 0xd4, 0xe4, 0x32, 0xb7, 0xd4, 0xc4, 0x92, 0xd2, 0xa2, 0x54, 0x21, 0x41, 0x3d, 0x98,
	0x3e, 0x3d, 0xa8, 0x90, 0x94, 0x10, 0x42, 0x28, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55,
	0xc8, 0x9c, 0x8b, 0x07, 0x49, 0x57, 0xb1, 0x90, 0x10, 0x86, 0xb6, 0x62, 0x29, 0x61, 0x4c, 0x7d,
	0xc5, 0x49, 0x6c, 0x60, 0x31, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0xc8, 0x64, 0xbf,
	0xc5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SegmentationClient is the client API for Segmentation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SegmentationClient interface {
	RecvFeature(ctx context.Context, in *protocol.Feature, opts ...grpc.CallOption) (*protocol.Response, error)
	RecvFeatures(ctx context.Context, in *protocol.Features, opts ...grpc.CallOption) (*protocol.Responses, error)
}

type segmentationClient struct {
	cc *grpc.ClientConn
}

func NewSegmentationClient(cc *grpc.ClientConn) SegmentationClient {
	return &segmentationClient{cc}
}

func (c *segmentationClient) RecvFeature(ctx context.Context, in *protocol.Feature, opts ...grpc.CallOption) (*protocol.Response, error) {
	out := new(protocol.Response)
	err := c.cc.Invoke(ctx, "/protocol.Segmentation/recvFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationClient) RecvFeatures(ctx context.Context, in *protocol.Features, opts ...grpc.CallOption) (*protocol.Responses, error) {
	out := new(protocol.Responses)
	err := c.cc.Invoke(ctx, "/protocol.Segmentation/recvFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentationServer is the server API for Segmentation service.
type SegmentationServer interface {
	RecvFeature(context.Context, *protocol.Feature) (*protocol.Response, error)
	RecvFeatures(context.Context, *protocol.Features) (*protocol.Responses, error)
}

// UnimplementedSegmentationServer can be embedded to have forward compatible implementations.
type UnimplementedSegmentationServer struct {
}

func (*UnimplementedSegmentationServer) RecvFeature(ctx context.Context, req *protocol.Feature) (*protocol.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvFeature not implemented")
}
func (*UnimplementedSegmentationServer) RecvFeatures(ctx context.Context, req *protocol.Features) (*protocol.Responses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvFeatures not implemented")
}

func RegisterSegmentationServer(s *grpc.Server, srv SegmentationServer) {
	s.RegisterService(&_Segmentation_serviceDesc, srv)
}

func _Segmentation_RecvFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.Feature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationServer).RecvFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Segmentation/RecvFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationServer).RecvFeature(ctx, req.(*protocol.Feature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Segmentation_RecvFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.Features)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationServer).RecvFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Segmentation/RecvFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationServer).RecvFeatures(ctx, req.(*protocol.Features))
	}
	return interceptor(ctx, in, info, handler)
}

var _Segmentation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Segmentation",
	HandlerType: (*SegmentationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "recvFeature",
			Handler:    _Segmentation_RecvFeature_Handler,
		},
		{
			MethodName: "recvFeatures",
			Handler:    _Segmentation_RecvFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "segmentation.proto",
}
